"""
Дан список размера N. Найти количество участков, на которых его элементы монотонно убывают.(для удобства проверки все
списки выводятся на экран)
"""
from random import randint


list = []
list_count = []

n = int(input('Введите размер списка:  '))
max_num = int(input('Введите максимальное число:  '))

count = 0
while count < n:              # заполнение списка числами от 0 до маскимального значения пользователя
    list.append(randint(0, max_num))
    count += 1
print('Ваш список:  ', list)

"""
подробно о следующем шаге: здесь обрабатывается список пользователя, если последующий элемент больше предыдущего,
в другой список - list_count, заносится 1, иначе 0. Такой шаг я сделала для того, чтобы обозначить начало и конец 
убывающей последовательности в списке пользователя.
"""
for i in range(1, len(list)):
    if list[i] > list[i - 1]:
        list_count.append(0)
    else:
        list_count.append(1)

print('Список с отображенными началами и концами убывания элементов, где 1 - убывание элементов: ', list_count)

a = 0
"""
подробно о следующем шаге: здесь идет работа со списком list_count - последовательностью единиц (которая означает, что
элементы в пользовательском списке на этих позициях убывали) и нулей. Так, например, для последовательности 87, 45, 33 в 
list_count занесется 1, 1. Но вышеприведенная последовательность убывания одна, хотя чисел 3. Следующий цикл решает 
эту проблему - после того, как встретилась последовательность единиц, она заменяется на одну единицу = один ПРОМЕЖУТОК
убывания.
"""
while a < len(list_count) - 1:
    if list_count[a] and list_count[a + 1] == 1:
        list_count[a] = 0
    a += 1
print('Список с отображеннными промежутками убывания - единицы: ', list_count)

print('Количество промежутков убывания:  ', sum(list_count))     # Вывод суммы списка - количества промежутков убывания

